drawCube(ncube1)
drawCube(ncube2)
tolower("AAA")
scube = strsplit(lower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
scube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
ncube1=multirot(icube,"R,F',D2");
ncube2=multirot(icube,"D,F',B2");
drawCube(ncube1)
drawCube(ncube2)
icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
ncube1=multirot(icube,"R,F',D2");
ncube2=multirot(icube,"D,F',B2");
drawCube(ncube1)
drawCube(ncube2)
ncube2
ncube1
cube2corners(ncube2)
cube2corners(ncube1)
icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
ncube1=multirot(icube,"R,F',D2");
ncube2=multirot(icube,"D,F',B2");
drawCube(ncube1)
drawCube(ncube2)
icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
ncube1= rotate(icube,"R");
drawCube(ncube1);
ncube2= rotate(ncube1,"F'");
drawCube(ncube2);
ncube3= rotate(ncube2,"D2");
drawCube(ncube3);
icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
ncube1= rotate(icube,"D");
drawCube(ncube1);
ncube2= rotate(ncube1,"F'");
drawCube(ncube2);
ncube3= rotate(ncube2,"B2");
drawCube(ncube3);
icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
drawCube(icube);
ncube1= rotate(icube,"D");
drawCube(ncube1);
ncube2= rotate(ncube1,"F'");
drawCube(ncube2);
ncube3= rotate(ncube2,"B2");
drawCube(ncube3);
ncube1
ncube1
cube2corners(ncube1)
cornernames[cube2corners(ncube1)]
cornernames[cube2corners(ncube1)+1]
icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
drawCube(icube);
ncube1= rotate(icube,"R");
drawCube(ncube1);
ncube2= rotate(ncube1,"F'");
drawCube(ncube2);
ncube3= rotate(ncube2,"D2");
drawCube(ncube3);
ncube3
cube2corners(ncube3)
ncube3
cornernames[cube2corners(ncube2)+1]
ncube2
drawCube(ncube2)
cube2corners(ncube2)
ncube2
cube2corners(ncube1)
icube
cube2corners(icube)
ncube1
cube
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
icube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
drawCube(icube);
ncube1= rotate(icube,"R");
drawCube(ncube1);
ncube2= rotate(ncube1,"F'");
drawCube(ncube2);
ncube3= rotate(ncube2,"D2");
drawCube(ncube3);
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
icube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
drawCube(icube);
ncube1= rotate(icube,"R");
drawCube(ncube1);
ncube2= rotate(ncube1,"F'");
drawCube(ncube2);
ncube3= rotate(ncube2,"D2");
drawCube(ncube3);
cube2corners(ncube1)
cube2corners(ncube2)
cube2corners(ncube3)
cube2corners(tolower("DDLLULULFFFFRRUURDRDBBBB"))
cube2corners(strsplit(tolower("DDLLULULFFFFRRUURDRDBBBB"),"")[[1]])
ncube1
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
#icube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
drawCube(icube);
ncube1= rotate(icube,"R");
drawCube(ncube1);
ncube2= rotate(ncube1,"F'");
drawCube(ncube2);
ncube3= rotate(ncube2,"D2");
drawCube(ncube3);
ncube1
cube2corners(ncube1)
cube2corners(icube)
ncube1
cube2corners(ncube1)
knitr::opts_chunk$set(echo = TRUE)
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
icube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
drawCube(icube);
ncube= rotate(icube,"F");
drawCube(ncube,label="F");
ncube1= rotate(ncube,"B2");
drawCube(ncube1);
ncube2= rotate(ncube1,"D'");
drawCube(ncube2);
ncube3= rotate(ncube2,"F2");
drawCube(ncube3);
ncube4= rotate(ncube3,"R");
drawCube(ncube4);
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
icube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
drawCube(icube);
ncube= rotate(icube,"F");
drawCube(ncube,label="F");
ncube1= rotate(ncube,"B2");
drawCube(ncube1,label="B2");
ncube2= rotate(ncube1,"D'");
drawCube(ncube2,label="D'");
ncube3= rotate(ncube2,"F2");
drawCube(ncube3,label="F2");
ncube4= rotate(ncube3,"R");
drawCube(ncube4,label="R");
ncube3
cube2corners(ncube3)
cube2corners(ncube4)
crotate(cube2corners(ncube3),"R")
setwd("C:/Users/sojba/Source/Repos/TwoByTwoPuzzleSolver/TwoByTwoPuzzleSolver")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/sojba/Source/Repos/TwoByTwoPuzzleSolver/TwoByTwoPuzzleSolver")
source('transformation.R')
cube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
drawCube(cube)
ucube = rotate(cube,"U"); drawCube(ucube);
ucube = rotate(cube,"U"); drawCube(ucube,label="U");
dcube = rotate(cube,"D"); drawCube(dcube,label="D");
fcube = rotate(cube,"F"); drawCube(fcube,label="F");
bcube = rotate(cube,"B"); drawCube(bcube,label="B");
rcube = rotate(cube,"R"); drawCube(rcube,label="R");
lcube = rotate(cube,"L"); drawCube(lcube,label="L");
dcube = rotate(rotate(cube,"D"),"U'");
drawCube(dcube)
u3cube = rotate(rotate(cube,"U'"),"D");
drawCube(u3cube)
dcube = rotate(rotate(cube,"L"),"R'");
drawCube(dcube,label="R'L")
u3cube = rotate(rotate(cube,"R'"),"L");
drawCube(u3cube,label="LR'")
dcube = rotate(rotate(cube,"F"),"B'");
drawCube(dcube,label="B'F")
u3cube = rotate(rotate(cube,"B'"),"F");
drawCube(u3cube,label="FB'")
transform <-function(vec,vals) {
return(vec[vals+1]);
}
rot2ctrans <- function(rot) {
arr = 0:7;
for (tp in rot) {
indices = tp+1;
for (ii in 1:length(indices)) {
arr[indices[ii]] = tp[ii %% length(indices) + 1];
}
}
arr;
}
ctransforms = list(
list(name = "U", rot=list(c(3,1,0,2))),
list(name = "D", rot=list(c(6,4,5,7))),
list(name = "F", rot=list(c(1,5,4,0))),
list(name = "B", rot=list(c(2,6,7,3))),
list(name = "R", rot=list(c(0,4,6,2))),
list(name = "L", rot=list(c(3,7,5,1)))
)
ctble = data.frame();
for (trs in ctransforms) {
tr=rot2ctrans(trs$rot);rots = lapply(1:nrow(ctble), function(x) unlist(ctble[x,]));
names(rots) = row.names(ctble);
tr2=transform(tr,tr);
trprime= transform(tr,transform(tr,transform(0:7,tr)));
subtab=rbind(tr,trprime,tr2);
row.names(subtab) = paste0(trs$name,c("","'","2"));
ctble=rbind(ctble, subtab);
}
ctble
crotate<-function(corners,cmd) {
trans=unlist(ctble[cmd,])+1
corners[trans];
}
cube2corners <- function(cube) {
valdic=list("u"=0,"d"=4,"f"=0,"b"=2,"r"=0,"l"=1);
combineVal <- function(x,y,z) {
valdic[[cube[x+1]]]+valdic[[cube[y+1]]]+valdic[[cube[z+1]]];
}
ufr=combineVal(3,4,9);
ufl=combineVal(2,8,17);
ubr=combineVal(1,5,20);
ubl=combineVal(0,16,21);
dfr=combineVal(6,11,13);
dfl=combineVal(10,12,19);
dbr=combineVal(7,15,22);
dbl=combineVal(14,18,23);
return(c(ufr,ufl,ubr,ubl,dfr,dfl,dbr,dbl));
}
ctble = data.frame();
for (trs in ctransforms) {
tr=rot2ctrans(trs$rot);rots = lapply(1:nrow(tble), function(x) unlist(ctble[x,]));
names(rots) = row.names(ctble);
tr2=transform(tr,tr);
trprime= transform(tr,transform(tr,transform(0:7,tr)));
subtab=rbind(tr,trprime,tr2);
row.names(subtab) = paste0(trs$name,c("","'","2"));
ctble=rbind(ctble, subtab);
}
ss = "new int [][]{";
for (ii in 1:nrow(ctble)) {
ss=paste0(ss,ifelse(ii==1,"",",")," new int[]  {",paste(ctble[ii,],collapse=","),"} //",row.names(ctble)[ii],"\n");
}
ss = paste0(ss,"}")
writeLines(ss);
corners=c(UFR=0,UFL=1,UBR=2,UBL=3, DFR=4, DFL=5, DBR=6,DBL=7)
crot <- function(corner, rot) {
if (rot=="I") { return(corner); }
idx=which(names(corners)==corner)
names(corners)[ctble[rot,idx]+1];
}
cornernames = names(corners);
trans = row.names(ctble);
solutionset = list()
for (co in cornernames) {
solutionset[[co]] = list(list(op="I", elem=co));
}
optable = array("", dim=c(8,8));
row.names(optable) = cornernames;
colnames(optable) = cornernames;
for (rw in cornernames) {
for (tr in trans) {
cl = crot(rw, tr);
#print(paste0(tr,"[",rw,"]=",cl,"\n"))
#optable[rw,cl]=ifelse(optable[rw,cl]=="", tr, paste0(optable[rw,cl], ",", tr));
if (optable[rw,cl]=="") {
optable[rw,cl] = tr;
}
}
optable[rw,rw] = "I";
}
optable["UFR","DBL"] = "R2,D'";
optable["UFL","DBR"] = "F,D2";
optable["UBR","DFL"] = "R2,D";
optable["UBL","DFR"] = "U',R2";
optable["DFR","UBL"] = "R2,U";
optable["DFL","UBR"] = "F',U2";
optable["DBR","UFL"] = "R2,U'";
optable["DBL","UFR"] = "L2,U";
optable;
run_op<-function(input, ops) {
opsarray = strsplit(ops,",")[[1]];
out = input;
for (op in opsarray) {
out=crot(out, op)
}
return(out);
}
run_op("DBL","L2,U")  # UFR
result=c();
for (e1 in names(corners)) {
for (e2 in names(corners)) {
out = run_op(e1,optable[e1,e2]);
result = append(result, out == e2);
}
}
all(result);
nodes = list(
UFR=c(3,4,9),
UFL=c(2,8,17),
UBR=c(1,5,20),
UBL=c(0,16,21),
DFR=c(6,11,13),
DFL=c(10,12,19),
DBR=c(7,15,22),
DBL=c(14,18,23)
);
rot <- function(face, cmd) {
if (cmd=="I") return(face);
trans=as.vector(unlist(tble[cmd,]));
trans[face+1];
}
face_op<-function(face, ops) {
opsarray = strsplit(ops,",")[[1]];
out=list();
for (f in face) {
out[[as.character(f)]] = f;
for (op in opsarray) {
out[[as.character(f)]]=rot(out[[as.character(f)]], op)
}
}
return(out);
}
corner2faces<-function(cornerplace,cornername) {
trf = optable[cornername,cornerplace];
face_op(nodes[[cornername]],trf);
}
#  4   3   2   1   1   3   5   7   2   1   6   5   6   5   8   7   4   2   8   6   3   4   7   8
# "u" "r" "u" "u" "r" "d" "r" "b" "f" "f" "f" "f" "d" "d" "l" "d" "b" "l" "u" "l" "b" "r" "l" "b"
# "R" "r" "u" "u" "r" "d" "r" "d" "f" "f" "f" "f" "d" "d" "l" "l" "U" "l" "u" "l" "b" "B" "b" "b"
#
corners2cube <- function(cors) {
# browser();
cnames = sapply(cors, function(x) cornernames[x+1]);
placenames = cornernames;
refcube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
newcube = rep("",24);
for (ii in seq_along(placenames)) {
out=corner2faces(placenames[ii], cnames[ii]);
#newcube[as.numeric(names(out))+1] = refcube[unlist(out)+1];
newcube[unlist(out)+1] = refcube[as.numeric(names(out))+1]
names(newcube)[unlist(out)+1] = ii;
}
newcube;
}
cr = cube2corners(cube);
matching = sapply(trans, function(x) {
ncube = rotate(cube,"B")
ncr1= crotate(cr,"B")
ncr2= cube2corners(ncube);
all(ncr1==ncr2);
})
matching
multirot<-function(cube, ops) {
opsarray = strsplit(ops,",")[[1]];
for (ops in opsarray) {
cube = rotate(cube, ops);
};
cube;
}
icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
ncube1=multirot(icube,"R,F',D2");
ncube2=multirot(icube,"D,F',B2");
drawCube(ncube1)
drawCube(ncube2)
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
icube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
drawCube(icube);
ncube= rotate(icube,"F");
drawCube(ncube,label="F");
ncube1= rotate(ncube,"B2");
drawCube(ncube1,label="B2");
ncube2= rotate(ncube1,"D'");
drawCube(ncube2,label="D'");
ncube3= rotate(ncube2,"F2");
drawCube(ncube3,label="F2");
ncube4= rotate(ncube3,"R");
drawCube(ncube4,label="R");
cube2corners(ncube4)
cube2corners(ncube3)
cube2corners(ncube4)
cube2corners(ncube5)
cube2corners(ncube4)
cnrs=cube2corners(ncube5)
cnrs=cube2corners(ncube4)
cnrs
ncube4_2=corners2cube(cnrs)
ncube4_2
ncube4
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
icube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
drawCube(icube);
ncube= rotate(icube,"F");
drawCube(ncube,label="F");
ncube1= rotate(ncube,"B2");
drawCube(ncube1,label="B2");
ncube2= rotate(ncube1,"D'");
drawCube(ncube2,label="D'");
ncube3= rotate(ncube2,"F2");
drawCube(ncube3,label="F2");
ncube4= rotate(ncube3,"R");
drawCube(ncube4,label="R");
source('transformation.R')
cube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
drawCube(cube)
ucube = rotate(cube,"U"); drawCube(ucube);
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
#icube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
drawCube(icube);
ncube= rotate(icube,"U'");
drawCube(ncube,label="U'");
ncube1= rotate(ncube,"F'");
drawCube(ncube1,label="F'");
ncube2= rotate(ncube1,"R");
drawCube(ncube2,label="R");
ncube3= rotate(ncube2,"L");
drawCube(ncube3,label="L");
ncube3
cube2corners(ncube3)
cornernames[cube2corners(icube)]
cr = cube2corners(cube);
matching = sapply(trans, function(x) {
ncube = rotate(cube,"B")
ncr1= crotate(cr,"B")
ncr2= cube2corners(ncube);
all(ncr1==ncr2);
})
matching
#  4   3   2   1   1   3   5   7   2   1   6   5   6   5   8   7   4   2   8   6   3   4   7   8
# "u" "r" "u" "u" "r" "d" "r" "b" "f" "f" "f" "f" "d" "d" "l" "d" "b" "l" "u" "l" "b" "r" "l" "b"
# "R" "r" "u" "u" "r" "d" "r" "d" "f" "f" "f" "f" "d" "d" "l" "l" "U" "l" "u" "l" "b" "B" "b" "b"
#
corners2cube <- function(cors) {
# browser();
cnames = sapply(cors, function(x) cornernames[x+1]);
placenames = cornernames;
refcube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
newcube = rep("",24);
for (ii in seq_along(placenames)) {
out=corner2faces(placenames[ii], cnames[ii]);
#newcube[as.numeric(names(out))+1] = refcube[unlist(out)+1];
newcube[unlist(out)+1] = refcube[as.numeric(names(out))+1]
names(newcube)[unlist(out)+1] = ii;
}
newcube;
}
res = paste(cornernames[cube2corners(ncube)])
res
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
#icube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
drawCube(icube);
res = paste(cornernames[cube2corners(ncube)])
ncube= rotate(icube,"U'");
drawCube(ncube,label=paste0("U'", res));
ncube1= rotate(ncube,"F'");
res = paste(cornernames[cube2corners(ncube1)])
drawCube(ncube1,label=paste0("F'", res));
ncube2= rotate(ncube1,"R");
res = paste(cornernames[cube2corners(ncube2)])
drawCube(ncube2,label=paste0("R", res));
ncube3= rotate(ncube2,"L");
res = paste(cornernames[cube2corners(ncube3)])
drawCube(ncube3,label=paste0("L", res));
res
res
res = paste(cornernames[cube2corners(ncube3)]
res
res
res = paste(cornernames[cube2corners(ncube3)])
res
cornernames
res
#icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
icube = strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]];
#icube = strsplit("uuuurrrrffffddddllllbbbb","")[[1]];
drawCube(icube);
ncube= rotate(icube,"U'");
drawCube(ncube,label="U'");
ncube1= rotate(ncube,"F'");
drawCube(ncube1,label="F'");
ncube2= rotate(ncube1,"R");
drawCube(ncube2,label="R");
ncube3= rotate(ncube2,"L");
drawCube(ncube3,label="L");
icube
cube1= strsplit(tolower("UULLURURFFFFRRDDLDLDBBBB"),"")[[1]]
cube1
cube1= strsplit(tolower("UULLURURFFFFRRDDLDLDBBBB"),"")[[1]]
cornernames[cube2corners(cube1)]
cube0= strsplit(tolower("UULLURURFFFFRRDDLDLDBBBB"),"")[[1]]
cornernames[cube2corners(cube0)]
cube2corners(cube0)
cube0= strsplit(tolower("UULLURURFFFFRRDDLDLDBBBB"),"")[[1]]
cornernames[cube2corners(cube0)+1]
cube1= strsplit(tolower("DDLLULULFFFFRRUURDRDBBBB"),"")
cornernames[cube2corners(cube1)+1]
cube1= strsplit(tolower("DDLLULULFFFFRRUURDRDBBBB"),"")[[1]]
cornernames[cube2corners(cube1)+1]
cube1= strsplit(tolower("DDLLULBBFFULRURURDFFBBRD"),"")[[1]]
cornernames[cube2corners(cube1)+1]
cube1= strsplit(tolower("RUFDRBBLLBRUDRLBFUDFLUDF"),"")[[1]]
cornernames[cube2corners(cube1)+1]
cs=cube2corners(cube1);
cs2=crotate(cs,"U'")
cornernames[cs2+1];
cs3=crotate(cs2,"F'");
cornernames[cs3+1];
cs4=crotate(cs3,"R");
cornernames[cs4+1];
cs3=crotate(cs2,"F'");
cornernames[cs3+1];
cs4
cs4=crotate(cs3,"R");
cornernames[cs4+1];
cs5=crotate(cs4,"L");
cornernames[cs5+1];
